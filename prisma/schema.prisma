// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  name        String
  phone       String?
  role        Role     @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  addresses   Address[]
  orders      Order[]
  cartItems   CartItem[]
  favorites   Favorite[]
  loyaltyPoints LoyaltyPoint[]
  reviews     Review[]

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  metaTitle   String?
  metaDescription String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  price       Float
  salePrice   Float?
  sku         String   @unique
  stockQuantity Int    @default(0)
  images      String[]
  weight      Float?
  material    String?
  dimensions  String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  metaTitle   String?
  metaDescription String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  favorites   Favorite[]
  reviews     Review[]

  @@map("products")
}

model Address {
  id          String  @id @default(cuid())
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String  @default("India")
  phone       String?
  isDefault   Boolean @default(false)
  type        AddressType @default(SHIPPING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique @default(cuid())
  status          OrderStatus   @default(PENDING)
  total           Float
  subtotal        Float
  tax             Float         @default(0)
  shippingCost    Float         @default(0)
  discount        Float         @default(0)
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  paymentId       String?
  shippingAddress String?       // JSON string for shipping address
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relations
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  loyaltyPoints   LoyaltyPoint[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  
  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(5)
  title     String?
  comment   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model LoyaltyPoint {
  id          String      @id @default(cuid())
  points      Int
  type        PointType   @default(EARNED)
  description String
  createdAt   DateTime    @default(now())
  expiresAt   DateTime?
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId     String?
  order       Order?      @relation(fields: [orderId], references: [id])

  @@map("loyalty_points")
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter_subscriptions")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum PointType {
  EARNED
  REDEEMED
  EXPIRED
}
